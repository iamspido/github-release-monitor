name: Build and Push Docker Image

on:
  # Trigger on push to branches (without version number) and release tags (with version number)
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]

  # Trigger on pull requests
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run ESLint in Docker (lint stage)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: lint
        push: false
        load: false
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  typecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run TypeScript typecheck in Docker (typecheck stage)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: typecheck
        push: false
        load: false
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  unit:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build unit test stage (runs Vitest)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: tester
        push: false
        load: false
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  coverage:
    # Run coverage on main, develop and tags
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    needs: unit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build coverage stage (generates coverage report)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: coverage
        push: false
        load: true
        tags: grm-coverage:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract coverage artifact
      run: |
        id=$(docker create grm-coverage:${GITHUB_SHA})
        mkdir -p coverage
        docker cp "$id":/app/coverage ./coverage || true
        docker rm "$id"

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ github.sha }}
        path: coverage
        if-no-files-found: warn

  build-and-push:
    needs: [lint, typecheck, unit]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=main-,enable={{is_default_branch}}
          type=sha,prefix=develop-,enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  e2e:
    # Run E2E on main, develop and tags
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    needs: unit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Playwright E2E image (runs tests during build)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: e2e
        push: false
        load: true
        tags: grm-e2e:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract Playwright artifacts (traces/reports)
      run: |
        id=$(docker create grm-e2e:${GITHUB_SHA})
        mkdir -p e2e-artifacts
        # Copy test-results (screenshots/videos/traces)
        docker cp "$id":/app/test-results ./e2e-artifacts/test-results || true
        # Copy HTML report if present
        docker cp "$id":/app/playwright-report ./e2e-artifacts/playwright-report || true
        docker rm "$id"

    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v4
      with:
        name: e2e-artifacts-${{ github.sha }}
        path: e2e-artifacts
        if-no-files-found: warn
