###############################
# Lint Stage (ESLint)
###############################
FROM node:24-alpine AS lint

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1

COPY package*.json ./
RUN npm ci && npm cache clean --force

COPY .eslintrc.json ./
COPY tsconfig.json ./
COPY src/ ./src/

RUN npm run lint

###############################
# Typecheck Stage (TypeScript)
###############################
FROM node:24-alpine AS typecheck

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1

COPY package*.json ./
RUN npm ci && npm cache clean --force

COPY tsconfig.json ./
COPY src/ ./src/

RUN npm run typecheck

###############################
# Test Stage (Vitest in Docker)
###############################
FROM node:24-alpine AS tester

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1

# Copy package files and install deps via lockfile
COPY package*.json ./
RUN npm ci && npm cache clean --force

# Copy config and source
COPY components.json \
     next.config.mjs \
     .eslintrc.json \
     postcss.config.mjs \
     tailwind.config.ts \
     tsconfig.json \
     vitest.config.ts \
     vitest.setup.ts \
     ./
COPY public/ ./public/
COPY src/ ./src/
COPY tests/ ./tests/

# Run unit tests during build (lint/typecheck run in separate targets)
RUN npm test

###############################
# Builder Stage (for E2E / standalone)
###############################
FROM node:24-alpine AS builder

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1

COPY package*.json ./

RUN npm ci

COPY components.json \
     next.config.mjs \
     postcss.config.mjs \
     tailwind.config.ts \
     tsconfig.json \
     ./
COPY public/ ./public/
COPY src/ ./src/

# Produce standalone build used by Playwright e2e stage
# Force production env only for the build step so Next emits standalone output
RUN NODE_ENV=production npm run build

################################
# E2E Stage (Playwright)
################################
FROM mcr.microsoft.com/playwright:v1.55.0-jammy AS e2e

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production \
    CI=true \
    HTTPS=false \
    BACKGROUND_POLLING_INITIALIZED=true \
    AUTH_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \
    AUTH_USERNAME=test \
    AUTH_PASSWORD=test

# Install minimal deps for running Playwright
COPY package*.json ./
RUN npm install --omit=optional --no-audit --no-fund && npm cache clean --force \
 && npm install @playwright/test@1.55.0 playwright@1.55.0 --no-save --no-audit --no-fund

COPY playwright.config.ts ./
COPY tests/e2e ./tests/e2e

# Copy built app from builder
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Run Playwright tests
RUN node ./node_modules/@playwright/test/cli.js test

################################
# Coverage Stage (optional)
################################
FROM node:24-alpine AS coverage

WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1

# Copy package files and install deps via lockfile
COPY package*.json ./
RUN npm install && npm cache clean --force

# Copy config and source
COPY components.json \
     next.config.mjs \
     postcss.config.mjs \
     tailwind.config.ts \
     tsconfig.json \
     vitest.config.ts \
     vitest.setup.ts \
     ./
COPY public/ ./public/
COPY src/ ./src/
COPY tests/ ./tests/

RUN npm install -D vitest @vitest/coverage-v8 --no-save && \
    npx -y vitest run --coverage || (ls -la /app/coverage || true; exit 1)

################################
# Development Runtime Stage
################################
FROM node:24-alpine

WORKDIR /app

# Disable Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy package files
COPY package*.json ./

# Install dependencies as root
RUN npm ci && npm cache clean --force

# Change ownership of entire app directory to nextjs user
RUN chown -R nextjs:nodejs /app

# Switch to non-root user for runtime
USER nextjs

# Copy configuration files
COPY components.json \
     next.config.mjs \
     postcss.config.mjs \
     tailwind.config.ts \
     tsconfig.json ./

# Copy source code and public assets
COPY public/ ./public/
COPY src/ ./src/

# Expose development port
EXPOSE 3000

# Start application in development mode
CMD ["npm", "run", "dev"]
